// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview This file defines a Genkit flow to interpret user intents for ticket booking, handling ambiguous requests.
 *
 * - interpretUserIntents - A function that interprets user requests and provides options for dates, times, and ticket quantities.
 * - InterpretUserIntentsInput - The input type for the interpretUserIntents function.
 * - InterpretUserIntentsOutput - The return type for the interpretUserIntents function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const InterpretUserIntentsInputSchema = z.object({
  userRequest: z.string().describe('The user request for ticket booking.'),
});
export type InterpretUserIntentsInput = z.infer<typeof InterpretUserIntentsInputSchema>;

const InterpretUserIntentsOutputSchema = z.object({
  suggestedDateOptions: z.array(z.string()).describe('Suggested date options based on the user request.'),
  suggestedTimeOptions: z.array(z.string()).describe('Suggested time options based on the user request.'),
  suggestedTicketQuantities: z.array(z.number()).describe('Suggested ticket quantities based on the user request.'),
  additionalContext: z.string().optional().describe('Any additional context or clarification needed from the user.'),
});
export type InterpretUserIntentsOutput = z.infer<typeof InterpretUserIntentsOutputSchema>;

export async function interpretUserIntents(input: InterpretUserIntentsInput): Promise<InterpretUserIntentsOutput> {
  return interpretUserIntentsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'interpretUserIntentsPrompt',
  input: {schema: InterpretUserIntentsInputSchema},
  output: {schema: InterpretUserIntentsOutputSchema},
  prompt: `You are a ticket booking assistant. A user has made the following request:

"{{userRequest}}"

- If the user request is a number, assume it's the desired quantity of tickets. In this case, return empty arrays for all suggestion fields.
- If the request is ambiguous (e.g., "I want tickets"), suggest several options for dates, times, and ticket quantities that might be relevant.
- If the request provides enough information to start the booking process (e.g., "2 tickets for tomorrow"), return empty arrays for all suggestion fields.

Format your output as a JSON object with the following keys:
- suggestedDateOptions: An array of strings representing suggested dates (e.g., ["Tomorrow", "This weekend", "Next week"]).
- suggestedTimeOptions: An array of strings representing suggested times (e.g., ["10:00 AM", "2:00 PM", "Evening"]).
- suggestedTicketQuantities: An array of numbers representing suggested ticket quantities (e.g., [1, 2, 3, 4]).
- additionalContext: A string containing any additional context or clarification needed from the user. This field is optional.
`,
});

const interpretUserIntentsFlow = ai.defineFlow(
  {
    name: 'interpretUserIntentsFlow',
    inputSchema: InterpretUserIntentsInputSchema,
    outputSchema: InterpretUserIntentsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
